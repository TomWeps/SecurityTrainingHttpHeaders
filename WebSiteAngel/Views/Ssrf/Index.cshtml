@model string
@{
    ViewData["Title"] = "Index";
}

<h1>Server-Side Request Forgery (SSRF) </h1>
<p>
    Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker 
    to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing.
</p>
<p>
    In typical SSRF examples, the attacker might cause the server to make a connection back to itself, 
    or to other web-based services within the organization's infrastructure, or to external third-party systems.
</p>
<p> This vulnerability can be found not only directly in the web server, but also in other protocols (like ftp, mailto, zip, etc ), data sources ( for example xml , mp4, etc) or libraries.</p>

<object data="ssrf/server-side-request-forgery.svg" type="image/svg+xml"></object>


<h3>Demo</h3>
<ul>
    <li><a asp-controller="Ssrf" asp-action="GetResource" asp-route-file="@(Model+"/ssrf/secret.txt")">Simple Example</a></li>
</ul>

<h3>Prevention</h3>
<a href="https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html#server-side-request-forgery-cheat-sheet">OWASP: Server-Side Request Forgery Cheat Sheet</a>
<ul>    
    <li>Validation of input parameters and uploaded files</li>
    <li>White List Filtering (URIs, Paths, etc. )</li>
    <li>Proper Firewall Configuration</li>
</ul>

@{
    string[] uriList = new[]
    {
        "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
        "https://portswigger.net/web-security/ssrf"

    };
}
@await Html.PartialAsync("_Resources", uriList)